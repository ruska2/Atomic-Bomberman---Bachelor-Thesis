import com.example.robo.atomicbomberman.Constants;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.ValueEventListener;
import java.util.*;

/**
 * Created by Robo on 14.05.2017.
 */
public class GetAllTracks {

    public void getAllTracks(){
        Server.db.databaseReference.child(Constants.TRACK_TABLE).addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if(dataSnapshot.getValue() != null) {
                    Map<String, Object> objectMap;
                    if (dataSnapshot.getValue() instanceof Map) {
                        objectMap = (HashMap<String, Object>) dataSnapshot.getValue();
                    } else {
                        ArrayList<Object> x = (ArrayList<Object>) dataSnapshot.getValue();
                        objectMap = new HashMap<String, Object>();
                        for (Object k : x) {
                            if (k != null) {
                                HashMap<String, Object> o = (HashMap<String, Object>) k;
                                objectMap.put(o.get(Constants.ACTIVE_BOMB_TABLE_ID).toString(), o);
                            }
                        }

                    }

                    RTree<Double> tree = new RTree<>();



                    for (Object obj : objectMap.values()) {
                        if (obj instanceof Map) {
                            Map<String, Object> values = (Map<String, Object>) obj;
                            double[] cords = new double[2];

                            cords[0] =  (double)values.get(Constants.ACTIVE_BOMB_TABLE_LATI);
                            cords[1] =  (double) values.get(Constants.ACTIVE_BOMB_TABLE_LONGI);

                            tree.insert(cords,(double) 1);

                            //System.out.println(cords[0] + "," + cords[1]);

                        }
                    }

                    tree.visualize();
                    //System.out.println(tree.getLists());

                    for(List<Node> l : tree.getLists()){
                        double[] p = PointsDistance.GetCentralGeoCoordinate(l);
                        Map<String,Double> m = new HashMap<>();
                        m.put(Constants.ACTIVE_BOMB_TABLE_LATI,p[0]);
                        m.put(Constants.ACTIVE_BOMB_TABLE_LONGI,p[1]);

                        //check if active user is near a  position generated by RTree!!!
                        Server.db.databaseReference.child("BONUSES").push().setValue(m);
                        //System.out.println(p[0] + ",,,," + p[1]);
                    }

                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }
}
